FORMAT: 1A

HOST:  http://pd-testing.us-west-2.elasticbeanstalk.com

# Order Taking System

Testing Server : http://pd-testing.us-west-2.elasticbeanstalk.com/

Note : Refer to the url in the production for our purpose

Order Taking System used to sync orders between various phones

## Table API [/api/tables/{id}]

+ Parameters
   + id (required)

### List All Tables [GET/api/tables]

To list all the tables.

+ Response 200 (application/json)

       [
            {
                "id": 12,
                "table_name": "1"
            },
            {
                "id": 13,
                "table_name": "2"
            },
            {
                "id": 14,
                "table_name": "3"
            },
            {
                "id": 15,
                "table_name": "4"
            },
            {   
                "id": 16,
                "table_name": "5"
            }
        ]
    

+ Response 500 (application/json)

        {
         
            "message": "Some error occurred while retrieving table from database."
        }
        
### Get a particular table [GET/api/tables/{id}]

To retrieve a particular table

+ Response 200 (application/json)


        {
            "id": 12,
            "table_name": "1"
        }
        

+ Response 404 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }
    

+ Response 500 (application/json)

        {

            "message": "Some error occurred while retrieving table from database."
        }
      
### Create a new Table [POST/api/tables]

We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "name" : "6"
        }

+ Response 200 (application/json)
        
        
        [
            {
                "id": 12,
                "table_name": "1"
            },
            {
                "id": 13,
                "table_name": "2"
            },
            {
                "id": 14,
                "table_name": "3"
            },
            {
                "id": 15,
                "table_name": "4"
            },
            {   
                "id": 16,
                "table_name": "5"
            }, 
            {   
                "id": 17,
                "table_name": "6"
            }
        ]
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }
        
+ Response 500 (application/json)

        {

            "message": "Some error occurred while creating table."
        }
        
        
### Delete a Table [DELETE/api/tables/{id}]

Delete  a particular table name;

+ Response 200 (application/json)

        [
            {
                "id": 13,
                "tableName": "2"
            },
            {
                "id": 14,
                "tableName": "3"
            },
            {
                "id": 15,
                "tableName": "4"
            },
            {   
                "id": 16,
                "tableName": "5"
            }, 
            {   
                "id": 17,
                "tableName": "6"
            }
        ]
        
    
+ Response 404 (application/json)

        {
            "error": 
            {
                "message": "You are trying to access menu not in database."
            }
        }
     
+ Response 500 (application/json)

        {
            "message": "Some error occurred while updating menu."
        }
        
## Menu API [/api/menus/{id}]

+ Parameters
   + id (required)

### List All Menus [GET/api/menus]


To list all the menus.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "foodName": "Plain Dosa",
                "category": "Dosa",
                "price": 30
            },
            {
                "id": 2,
                "foodName": "Masala Dosa",
                "category": "Dosa",
                "price": 60
            },
            {
                "id": 3,
                "foodName": "Ghee Dosa",
                "category": "Dosa",
                "price": 50
            }
        ]
        
+ Response 500 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }
        
### Get a particular menu [GET/id/api/menus/{id}]

To retrieve a particular menu

+ Response 200 (application/json)

            {
                "id": 1,
                "foodName": "Plain Dosa",
                "category": "Dosa",
                "price": 30
            }


+ Response 404 (application/json)

        {
            "message": "You are trying to access a menu not in database."
        }
    

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 
### Create a new Menu [POST/api/menus]


We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "name" : "Chappathi",
            "category" : "South Indian",
            "price" : "50"
        }

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "food_name": "Plain Dosa",
                "category": "Dosa",
                "price": 30
            },
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": "Dosa",
                "price": 60
            },
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": "Dosa",
                "price": 50
            },
            {
                "id": 4,
                "food_name": "Chappathi",
                "category": "South Indian",
                "price": 50
            }
                
        ]
        
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ],
                "category": [
                    "The category field is required."
                ],
                "price": [
                    "The price field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 

### Update a Menu [PUT/api/menus/{id}]

We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "name" : "Idly",
            "category" : "South Indian",
            "price" : "50"
        }

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "foodName": "Plain Dosa",
                "category": "Dosa",
                "price": 30
            },
            {
                "id": 2,
                "foodName": "Masala Dosa",
                "category": "Dosa",
                "price": 60
            },
            {
                "id": 3,
                "foodName": "Ghee Dosa",
                "category": "Dosa",
                "price": 50
            },
            {
                "id": 4,
                "foodName": "Idly",
                "category": "South Indian",
                "price": 50
            }
                
        ]
        
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }
   
+ Response 404 (application/json)

        {
                "message": "You are trying to access menu not in database."
        }
        
+ Response 500 (application/json)

        {
                "message": "Some error occurred while retrieving menu from database."
        }
 
            
### Delete a Menu [DELETE/api/menu/{id}]

To delete a menu.

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": "Dosa",
                "price": 60
            },
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": "Dosa",
                "price": 50
            },
            {
                "id": 4,
                "food_name": "Chappathi",
                "category": "South Indian",
                "price": 50
            }
                
        ]
    
+ Response 404 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
        
        
## Pending Order API [/api/pending-orders/{order-name}/tables/{table-name}]

+ Parameters
   + order-name
   + table-name 

### List All Pending Orders [GET/api/pending-orders]

To list all the pending orders.


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/pending-orders/

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "table_name": "1",
                "order_name": "gowtham",
                "order": {
                    "dosa": 2,
                    "idly": 2,
                }
            },
            {
                "id": 2,
                "table_name": "2",
                "order_name": "gowtham",
                "order": {
                    "dosa": 2,
                    "idly": 2,
                }
            },
            {
                "id": 3,
                "table_name": "4",
                "order_name": "naveen",
                "order": {
                    "dosa": 1,
                    "idly": 2
                }
            }
        ]
                
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving pending orders from database."
        }
        
### Get a particular order [GET/api/pending-orders/{order-name}]

To retrieve a particular order


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/pending-orders/gowtham

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "table_name": "1",
                "order_name": "gowtham",
                "order": {
                    "dosa": 2,
                    "idly": 2,
                }
            },
            {
                "id": 2,
                "table_name": "2",
                "order_name": "gowtham",
                "order": {
                    "dosa": 2,
                    "idly": 2,
                }
            }
        ]
 
+ Response 404 (application/json)

        {
            "message": "You are trying to access a order not in database."
        }
    

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving pending orders from database."
        }
 
 
### Get a particular order under a particular table [GET /api/pending-orders/{order-name}/tables/{table-name}]

To retrieve a particular order under a table


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/pending-orders/gowtham/tables/1

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "table_name": "1",
                "order_name": "gowtham",
                "order": {
                    "dosa": 2,
                    "idly": 2,
                }
            }
        ]
 
+ Response 404 (application/json)

        {
            "message": "You are trying to access a order not in database."
        }
    

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving pending orders from database."
        }
 
### Create a new Pending Order [POST/api/pending-orders]


We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "table_name": "1"
            "order_name": "gowtham"
            "order": {
                    "dosa": 2,
                    "idly": 2,
                }
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "table_name": "1",
            "order_name": "gowtham",
            "order": {
                    "dosa": 2,
                    "idly": 2,
                }
        }
        
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "table_name": [
                    "The table name field is required."
                ],
                "order_name": [
                    "The order name field is required."
                ],
                "order": [
                    "The order field is required."
                ]
            }
        }       
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 

### Update a Pending Order [PUT/api/pending-orders/{order-name}/tables/{table-name}]

To update the pending order. Supply the new order in the parameter to the update request.
The pending order will be updated and sent back.

+ Request 

        {
            "order":
                {
                "poori": 1
                }
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "table_name": "1",
            "order_name": "gowtham",
            "order": {
                "dosa": 2,
                "idly": 2,
                "poori": 1
            }
        } 
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order_name": [
                    "Order not found in the database. Provide a valid Order name."
                ],
                "table_name": [
                    "Order is not placed under the table."
                ],
                "order": [
                    "The order field is required."
                ]
            }
        }
            
   
+ Response 500 (application/json)

        {
                "message": "Some error occurred while updating order in database."
        }
 
            
### Delete a PendingOrder from a particukar table[DELETE/api/pending-orders/{order-name}/tables/{table-name}]

To delete a order from a particular table

+ Response 200 (application/json)

        {
            "message": "Order deleted successfully."
        }
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order_name": [
                    "Order not found in the database. Provide a valid Order name."
                ],
                "table_name": [
                    "Order is not placed under the table."
                ]
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while deleting order from database."
        }
        
### Delete a PendingOrder [DELETE/api/pending-orders/{order-name}]

To delete a order from a particular table

+ Response 200 (application/json)

        {
            "message": "Order deleted successfully."
        }
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order_name": [
                    "Order not found in the database. Provide a valid Order name."
                ],
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while deleting order from database."
        }

### Delete all PendingOrders [DELETE/api/pending-orders]

To delete a order from a particular table

+ Response 200 (application/json)

        {
            "message": "Order deleted successfully."
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred clearing pending orders."
        }
        
## Order API [/api/orders]


### List All Orders [GET/api/orders]

To list all the orders.


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/orders/

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "bill_no": "PD00001",
                "date": "25-09-2019",
                "time": "01-39 AM",
                "discount": 100,
                "amount": 1000,
                "total": 1100,
                "order": {
                    "dosa": 1,
                    "chappati": 2
                }
            },
            {
                "id": 2,
                "bill_no": "PD00002",
                "date": "26-10-2019",
                "time": "05-54 AM",
                "discount": 9,
                "amount": 249,
                "total": 240,
                "order": {
                    "dosa": 3,
                    "idly": 5
                }
            }
        ]
                
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving orders from database."
        }
        
### List All Orders Under a Particular Date [GET/api/orders]

To list all the orders under a particular date.


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/orders/?date=23-09-2019

+ Body

        {
            "date": "23-09-2019"
        }
        
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "bill_no": "PD00001",
                "date": "25-09-2019",
                "time": "01-39 AM",
                "discount": 100,
                "amount": 1000,
                "total": 1100,
                "order": {
                    "dosa": 1,
                    "chappati": 2
                }
            },
            {
                "id": 2,
                "bill_no": "PD00002",
                "date": "26-10-2019",
                "time": "05-54 AM",
                "discount": 9,
                "amount": 249,
                "total": 240,
                "order": {
                    "dosa": 3,
                    "idly": 5
                }
            },
            {
                "id": 3,
                "bill_no": "PD00003",
                "date": "26-10-2019",
                "time": "05-54 AM",
                "discount": 50,
                "amount": 500,
                "total": 550,
                "order": {
                    "dosa": 1,
                    "idly": 2
                }
            }
        ]
                

                
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving orders from database."
        }
        


### Create a new Pending Order [POST/api/orders]


We can also create a new order. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "order": {
                "dosa":1,
                "idly":2
                },
            "amount": 500
            "total":550
            "discount":50
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "table_name": "1",
            "order_name": "gowtham",
            "order": {
                    "dosa": 2,
                    "idly": 2,
                }
        }
        
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order": [
                    "The order field is required."
                ],
                "amount": [
                    "The amount field is required."
                ],
                "total": [
                    "The total field is required."
                ],
                "discount": [
                    "The discount field is required."
                ]
            }
        }      

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }