FORMAT: 1A

HOST:  http://pd-testing.us-west-2.elasticbeanstalk.com

# Order Taking System

Testing Server : http://pd-testing.us-west-2.elasticbeanstalk.com/

Note : Refer to the url in the production for our purpose

Order Taking System used to sync orders between various phones

## Auth API [/api]

### Login API [POST /api/login]

Send a login request to the server with the credentials

+ Attributes
   + email (string, required) - Input should be of Email format. 
   + password (string, required) - Password should be greater than 8 characters. 


+ Request (application/json)

    + Headers

            X-Requested-With: XMLHttpRequest
    
    + Body 
    
            {
                "email": "gowthampranesh007@gmail.com",
                "desciption": "12345678"
            }

+ Response 200 (application/json)

        {
            "data": {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9teXdlYmFwcC50ZXN0XC9hcGlcL2xvZ2luIiwiaWF0IjoxNTY3MTYwNzQ2LCJleHAiOjE1NjcxNjQzNDYsIm5iZiI6MTU2NzE2MDc0NiwianRpIjoicDNQcVlRa3kwWmJqUkpMaCIsInN1YiI6MSwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.UxwJnoDVbHxNDuCpMTCXXITeYx_Cpx72wUWf-J27xGY",
            "token_type": "bearer",
            "expires_in": 3600
            }
        }

+ Response 419 (application/json)

        {  
            "error":{  
                "message":"Credentials are invalid"
            }
        }

+ Response 422 (application/json)

        {  
            "message":"The given data was invalid.",
            "errors": {  
                "email": [  
                    "The email must be a valid email address."
                ],
                "password": [   
                    "The password must be at least 8 characters."
                ]
            }
        }
        
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "email": [
                    "The email field is required."
                ],
                "password": [
                    "The password field is required."
                ]
            }
        }
        
+ Response 500 (application/json)

        {
            "error" : {
                "message" : "Oops! Some error occurred in the server"
            }
        }

### Logout [POST /api/logout]]

Send a logout request to the server with the token

+ Request (application/json)

    + Headers

            Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9teXdlYmFwcC50ZXN0XC9hcGlcL2xvZ2luIiwiaWF0IjoxNTY3MTQ2NzIzLCJleHAiOjE1NjcxNTAzMjMsIm5iZiI6MTU2NzE0NjcyMywianRpIjoiREpwc1NxakRCeTZyQllidiIsInN1YiI6MSwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.CFHxoso490eMWt3-FCW3ZqljD9_7ddAPWEoOhEuAkq4
            X-Requested-With: XMLHttpRequest



+ Response 200 (application/json)

        {
            "message": "Successfully logged out"
        }

+ Response 419 (application/json)
    
            {
            "error": {
                "message": "Token is Invalid"
                }
            }

+ Response 419 (application/json)
    
            {
                "error": {
                    "message": "Token is Expired"
                }
            }
            
+ Response 500 (application/json)

        {
            "error": {
                "message": "Authorisation token not found"
                }
        }



## Table API [/api/tables/{id}]

+ Parameters
   + id (required)

### List All Tables [GET/api/tables]

To list all the tables.

+ Response 200 (application/json)

       [
            {
                "id": 12,
                "table_name": "1"
            },
            {
                "id": 13,
                "table_name": "2"
            },
            {
                "id": 14,
                "table_name": "3"
            },
            {
                "id": 15,
                "table_name": "4"
            },
            {   
                "id": 16,
                "table_name": "5"
            }
        ]
    

+ Response 500 (application/json)

        {
         
            "message": "Some error occurred while retrieving table from database."
        }
        
### Get a particular table [GET/api/tables/{id}]

To retrieve a particular table

+ Response 200 (application/json)


        {
            "id": 12,
            "table_name": "1"
        }
        

+ Response 404 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }
    

+ Response 500 (application/json)

        {

            "message": "Some error occurred while retrieving table from database."
        }
      
### Create a new Table [POST/api/tables]

We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "name" : "6"
        }

+ Response 200 (application/json)
        
        
        [
            {
                "id": 12,
                "table_name": "1"
            },
            {
                "id": 13,
                "table_name": "2"
            },
            {
                "id": 14,
                "table_name": "3"
            },
            {
                "id": 15,
                "table_name": "4"
            },
            {   
                "id": 16,
                "table_name": "5"
            }, 
            {   
                "id": 17,
                "table_name": "6"
            }
        ]
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }
        
+ Response 500 (application/json)

        {

            "message": "Some error occurred while creating table."
        }
        
        
### Delete a Table [DELETE/api/tables/{id}]

Delete  a particular table name;

+ Response 200 (application/json)

        [
            {
                "id": 13,
                "tableName": "2"
            },
            {
                "id": 14,
                "tableName": "3"
            },
            {
                "id": 15,
                "tableName": "4"
            },
            {   
                "id": 16,
                "tableName": "5"
            }, 
            {   
                "id": 17,
                "tableName": "6"
            }
        ]
        
    
+ Response 404 (application/json)

        {
            "error": 
            {
                "message": "You are trying to access menu not in database."
            }
        }
     
+ Response 500 (application/json)

        {
            "message": "Some error occurred while updating menu."
        }
        
## Menu API [/api/menus/{id}]

+ Parameters
   + id (required)

### Get Menu Filters [GET /api/menus/filters]

To get filters for menus

+ Response 200 (application/json)

        {
            "type": [
                {
                    "id": 1,
                    "name": "Veg"
                },
                {
                    "id": 2,
                    "name": "Non Veg"
                }
            ],
            "category": [
                {
                    "id": 1,
                    "name": "Dosa"
                }
            ]
        }
        
### List All Menus [GET/api/menus]


To list all the menus.

+ Response 200 (application/json)

        [
            {
                "id": 4,
                "food_name": "Chicken Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 2,
                    "name": "Non Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": false,
                    "morning": false,
                    "afternoon": true
                },
                "price": 30
            },
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": false,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            }
        ]
                
+ Response 500 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }
        
### Get a particular menu [GET/id/api/menus/{id}]

To retrieve a particular menu

+ Response 200 (application/json)

            {
                "id": 1,
                "foodName": "Plain Dosa",
                "category": "Dosa",
                "price": 30
            }


+ Response 404 (application/json)

        {
            "message": "You are trying to access a menu not in database."
        }
    

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 
### Create a new Menu [POST/api/menus]


We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "name" : "fefj",
            "price" : 34,
            "status" : true,
            "time_of_day" : {"night" : true,"morning" : true,"evening" : true,"afternoon" : false},
            "category_id" : "1",
            "category_name" : "",
            "type_id" : "1",
            "type_name" : "",
            "description" : "test"
        }

+ Response 200 (application/json)

        [
            {
                "id": 4,
                "food_name": "Chicken Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 2,
                    "name": "Non Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": false,
                    "morning": false,
                    "afternoon": true
                },
                "price": 30
            },
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": false,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 6,
                "food_name": "fefj",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "test",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 34
            }
        ]
        
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ],
                "category": [
                    "The category field is required."
                ],
                "price": [
                    "The price field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 

### Update a Menu [PUT/api/menus/{id}]

We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 


        {
            "name" : "fefj",
            "price" : 34,
            "status" : true,
            "time_of_day" : {"night" : true,"morning" : true,"evening" : true,"afternoon" : false},
            "category_id" : "1",
            "category_name" : "",
            "type_id" : "1",
            "type_name" : "",
            "description" : "test"
        }

+ Response 200 (application/json)

          [
            {
                "id": 4,
                "food_name": "Chicken Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 2,
                    "name": "Non Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": false,
                    "morning": false,
                    "afternoon": true
                },
                "price": 30
            },
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": false,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 6,
                "food_name": "fefj",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "test",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 34
            }
        ]
        
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name field is required."
                ]
            }
        }
    
+ Response 422 (application/json)

        {
            "message": "Validation failed",
            "errors": {
                "name": [
                    "The name has already been taken."
                ]
            }
        }
   
+ Response 404 (application/json)

        {
                "message": "You are trying to access menu not in database."
        }
        
+ Response 500 (application/json)

        {
                "message": "Some error occurred while retrieving menu from database."
        }
 
            
### Delete a Menu [DELETE/api/menu/{id}]

To delete a menu.

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "food_name": "Ghee Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": false,
                    "evening": false,
                    "morning": false,
                    "afternoon": true
                },
                "price": 30
            },
            {
                "id": 2,
                "food_name": "Masala Dosa",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "Description",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": false,
                    "morning": true,
                    "afternoon": false
                },
                "price": 30
            },
            {
                "id": 6,
                "food_name": "fefj",
                "category": {
                    "id": 1,
                    "name": "Dosa"
                },
                "description": "test",
                "type": {
                    "id": 1,
                    "name": "Veg"
                },
                "status": true,
                "time_of_day": {
                    "night": true,
                    "evening": true,
                    "morning": true,
                    "afternoon": false
                },
                "price": 34
            }
        ]
    
+ Response 404 (application/json)

        {
            "message": "You are trying to access a table not in database."
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
        
        
## Pending Order API [/api/pending-orders/{order-name}/tables/{table-name}]

+ Parameters
   + order-name
   + table-name 

### Pending Orders List[GET/api/pending-orders]

To list all the pending orders with filter


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/pending-orders/

+ Request 

            {
                "table_name" : 1,
                "order_name" : "test",
                "filter" : "today",
                "Status" : "completed"
            }
            
+ Response 200 (application/json)

        [
            {
                "id": 2,
                "table_name": "1",
                "order_name": "full",
                "order": "[{\"price\": 30.0, \"item_id\": 7, \"quantity\": 3, \"item_name\": \"Chicken Briyani\", \"category_id\": 0}]",
                "status": "pending",
                "date": "22-01-2020",
                "time": "06-25 AM"
            },
            {
                "id": 1,
                "table_name": "1",
                "order_name": "tedt",
                "order": "[{\"price\": 30.0, \"item_id\": 3, \"quantity\": 3, \"item_name\": \"Ghee Dosa\", \"category_id\": 0}]",
                "status": "pending",
                "date": "15-01-2020",
                "time": "12-53 PM"
            }
        ]
                        
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving pending orders from database."
        }
        

### Get all pending order names [GET /api/pending-order/get-all-names/]

+ Response 200(application/json)

        [
            "tedt",
            "full"
        ]
        
### Create a new Pending Order [POST /api/pending-orders]


We can also create a new table. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "table_name": "1"
            "order_name": "gowtham"
            "order": [
                    {
                        "item_id":2,
                        "quantity":2,
                        "price": 30,
                        "item_name": "Plain Dosa"
                    }
                ]    
        }

+ Response 200 (application/json)

        {
           "message": "Order created successfully."
        }
        
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "table_name": [
                    "The table name field is required."
                ],
                "order_name": [
                    "The order name field is required."
                ],
                "order": [
                    "The order field is required."
                ]
            }
        }       
    

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 

### Delete a PendingOrder [DELETE/api/pending-orders]

To delete a order from a particular table

+ Request (application/json)

            {
                "table_name" : 1,
                "order_name" : "test",
            }
            
+ Response 200 (application/json)

        {
            "message": "Order deleted successfully."
        }
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order_name": [
                    "Order not found in the database. Provide a valid Order name."
                ],
            }
        }

+ Response 500 (application/json)

        {
            "message": "Some error occurred while deleting order from database."
        }

## Order API [/api/orders]


### List All Orders [GET/api/orders]

To list all the orders.


Example - http://pd-testing.us-west-2.elasticbeanstalk.com/api/orders/

+ Request (application/json)

            {
                "date" : "02-07-18"
            }
    

+ Response 200 (application/json)

      [
            {
                "id": 1,
                "bill_no": "1",
                "date": "02-07-2018",
                "time": "01-37 PM",
                "discount": 15,
                "amount": null,
                "total": 232,
                "order": "[{\"cat_id\": 1, \"item_id\": 2, \"type_id\": 1, \"quantity\": 2}, {\"cat_id\": 1, \"item_id\": 4, \"type_id\": 2, \"quantity\": 2}]"
            },
            {
                "id": 2,
                "bill_no": "2",
                "date": "02-07-2018",
                "time": "01-37 PM",
                "discount": 17,
                "amount": null,
                "total": 692,
                "order": "[{\"cat_id\": 1, \"item_id\": 3, \"type_id\": 1, \"quantity\": 3}, {\"cat_id\": 1, \"item_id\": 3, \"type_id\": 2, \"quantity\": 5}]"
            },
        ]
                
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving orders from database."
        }
        

### Create a new Order [POST/api/orders]


We can also create a new order. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "order": [
                {
                    "item_name":"Mutton Biryani",
                    "item_id": 1,
                    "category_id" : 1,
                    "type_id" : 1,
                    "price":"120",
                    "quantity":1
                },
            ],
            "sub_total": 500
            "total":550
            "discount":50
        }

+ Response 200 (application/json)

        {
            "message": Order created successfully.
        }

                

+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "order": [
                    "The order field is required."
                ],
                "amount": [
                    "The sub_total field is required."
                ],
                "total": [
                    "The total field is required."
                ],
                "discount": [
                    "The discount field is required."
                ]
            }
        }      

+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving menu from database."
        }
 

## Report API [/api/reports]

### Get Data from ItemSalesReport [GET/api/reports/daily/items-count-details]


We can also create a new order. It takes a JSON response and returns all tables as response.

+ Request 

        {
            "date": 27-10-2019
        }

+ Response 200 (application/json)

        [
            {
                "dosa": 4,
                "idly": 7
            }
        ]
                

                
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "date": [
                    "The date field is required."
                ]
            }
        }
        
+ Response 422 (application/json)

        {
            "message": "The given data was invalid.",
            "errors": {
                "date": [
                    "The date does not match the format d-m-Y.",
                    [
                        "Date should not be greater than today"
                    ]
                ]
            }
        }
        
        
+ Response 500 (application/json)

        {
            "message": "Some error occurred while retrieving items report from database."
        }
        
## Feedback API [/api/admin-feedback]

### Feedback API [POST]

+ Request (application/json)

        {
            "type" : "issue",
            "title" : "test",
            "description" : test"
        }
        
+ Response 200 (application/json)

        {
            "message" : "Feedback submitted successgully"
        }
        
## Setings API [/api/settings]

### Get Menu Settings [GET /api/settings/menu]

+ Response 200 (application/json)

        {
            "apply": true,
            "morning": {
                "from": "07:00 AM",
                "to": "08:00 AM"
            },
            "afternoon": {
                "from": "11:55 AM",
                "to": "03:30 PM"
            },
            "evening": {
                "from": "05:00 PM",
                "to": "06:00 PM"
            },
            "night": {
                "from": "07:00 PM",
                "to": "11:00 PM"
            }
        }
        
### Update Menu Settings [POST /api/settings/menu]

+ Request 

            {
                "apply": true,
                "morning": {
                    "from": "06:00 AM",
                    "to": "08:00 AM"
                },
                "afternoon": {
                    "from": "12:01 PM",
                    "to": "03:30 PM"
                },
                "evening": {
                    "from": "05:00 PM",
                    "to": "06:00 PM"
                },
                "night": {
                    "from": "07:00 PM",
                    "to": "10:00 PM"
                }
            }

+ Response 200 (application/json)

        {
            "message": "Menu settings updated successfully."
        }